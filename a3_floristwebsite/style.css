/* ===== AUDIO CONTROL BUTTON STYLING ===== */
/* Audio control button positioned at top right of the screen */
.audio-control {
  position: fixed;
  top: -45px;
  right: -73px;
  width: 210px;
  height: 185px;
  z-index: 1002; /* Above doors and other elements */
  cursor: pointer;
  transition: transform 0.2s ease, opacity 0.3s ease;
  opacity: 0.8;
  box-sizing: border-box;
}

/* Hover effect for audio control button */
.audio-control:hover {
  transform: scale(1.1);
  opacity: 1;
}

/* Responsive adjustments for audio control */
@media (max-width: 768px) {
  .audio-control {
    width: 180px;
    height: 180px;
    top: 15px;
    right: 15px;
  }
}

@media (max-width: 480px) {
  .audio-control {
    width: 150px;
    height: 150px;
    top: 10px;
    right: 10px;
  }
}

/* ===== GLOBAL RESPONSIVE RULES ===== */
/* Ensure all images, SVGs, and media elements are responsive */
img,
svg,
video,
canvas {
  max-width: 100%;
  height: auto;
  box-sizing: border-box;
}

/* ===== W3SCHOOLS TECHNIQUES MODIFIED FOR SCROLL-FOLLOWING DOOR EFFECT ===== */
/* 
I have been trying to create a door-sliding effect by using the technique of rotation of image until a certain degree, and trying to make the door image and background image to overlap so that I am able to apply scrolling animation on it. I experimented with different code and parameters, and I found out that this is the most suitable and most fit to my intention and aesthetic, and I adjusted some of the parameters.

The main challenge was creating doors that both rotate AND follow scroll position. I used several W3Schools base tutorials including CSS Transform with rotateY() and translateY(), CSS Transform-origin property, CSS Position with absolute positioning, CSS Z-index property, and CSS Margin with negative values.

My modifications to achieve scroll-following started with the original W3Schools transform example which was simply "transform: rotateY(45deg);". I enhanced this version to "transform: rotateY(45deg) translateY(100px);" which combines rotation AND vertical movement for scroll-following effect.

During my experimentation process using W3Schools techniques, I first tried simple side-by-side doors but they looked like separate panels and not realistic because there was no overlap which made it feel artificial. Then I attempted scaling doors but scale() made doors grow and shrink unnaturally and didn't mimic real door opening mechanics. My third attempt was basic rotation but the doors rotated from center instead of edges, making them look like spinning panels rather than opening doors.

The breakthrough came with the transform-origin technique where I used transform-origin: left/right center. This made the doors rotate from their edges like real doors. Then I experimented with overlap by using negative margin-left: -25% on the right door, which created realistic door overlap in the center. I also applied z-index layering with Door 1 having z-index: 2 and Door 2 having z-index: 1 for proper front/back door hierarchy.

My final innovation was combining rotateY() and translateY() transforms so that doors rotate AND follow scroll position simultaneously. The final W3Schools technique combination includes transform-origin: left/right center, rotateY() for 3D rotation effect, translateY() for scroll-following movement, negative margins for overlap, z-index for layering, and semi-transparent opacity for fridge door effect.
*/
/* Door section container */
/* Full viewport height for proper scroll interaction */
/* High z-index to stay on top of scrolling content */
.door-section {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  overflow: hidden;
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
  transition: opacity 1.5s ease-out; /* Faster fade transition */
}

/* 
I experimented with different opacity values for the door images to create the right visual effect. Initially I tried opacity: 1 for solid doors but it was too opaque and I couldn't see the background behind it. Then I tried opacity: 0.3 but it was too transparent and I lost the door presence. I settled on opacity: 0.5 which provides the perfect balance for what I call the "fridge door effect".

The semi-transparent doors mimic flowers kept in a fridge to maintain freshness. This half-transparency evokes curiosity as users can glimpse what's behind while creating anticipation, just like peering through a misted glass door to see the beautiful blooms inside.

I used W3Schools techniques including position: absolute for CSS positioning, object-fit: cover for proper image fitting, and opacity property for the transparency effect. I removed the will-change property because it's not covered in W3Schools tutorials and I'm using only W3Schools CSS properties for scroll-following animations. There's no transition because the rotation is directly controlled by scroll position.
*/
#doorImage1,
#doorImage2 {
  position: absolute;
  width: 50%;
  height: 100%;
  object-fit: cover;
  opacity: 1; /* Full opacity - 100% visibility */
  max-width: 100%;
  box-sizing: border-box;
}

/* 
I tried with different transform-origin values to make the left door swing realistically. First I tried transform-origin: center center but the door spun around its center like a record which didn't look natural. Then I tried transform-origin: left top but the door rotated from the top-left corner which looked weird and unnatural.

The breakthrough came when I used transform-origin: left center. This made the door swing from the left edge like a real door, mimicking real door hinge behavior. I used the W3Schools transform-origin property technique and positioned the door at left: 0 and top: 0 with z-index: 2 so it sits on top as the front door.
*/
#doorImage1 {
  left: 0;
  top: 0;
  z-index: 2;
  transform-origin: left center;
}

/* First I tried no overlap with doors side-by-side but they looked like two separate panels and not realistic. Then I tried margin-left: -10% but there was too little overlap and it still looked artificial.

 I used margin-left: -25% which created perfect overlap and a realistic door center seam. I also used transform-origin: right center so the door swings from the right edge, mirroring door 1. I used W3Schools techniques including negative margin values, transform-origin property, and z-index layering with z-index: 1 so it sits behind door 1 as the back door.

This creates realistic door overlap and proper swing mechanics where both doors appear to be part of a single door system rather than separate panels.
*/
#doorImage2 {
  right: 0;
  top: 0;
  z-index: 1;
  /* Back door - sits behind door 1 */
  margin-left: -25%;
  /* The overlap trick */
  transform-origin: right center; /* Hinge on the right, mirroring door 1 */
}

/* Decoration image - positioned on top of doors without scroll effects */
#decoImage {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: 1001; /* Above doors but below audio control */
  pointer-events: none; /* Allow interaction with elements below */
}

/* Background image */
#background {
  position: absolute;
  width: 100%;
  height: 100%;
  object-fit: cover;
  z-index: 0;
  max-width: 100%;
  box-sizing: border-box;
}

html {
  overflow-x: hidden;
  box-sizing: border-box;
}

body {
  display: flex;
  text-align: center;
  margin: 0;
  padding: 0;
  width: 100vw;
  min-height: 400vh;
  /* Significantly increased height to create longer scroll distance to SVG section */
  justify-content: center;
  align-items: flex-start;
  /* Changed from center to flex-start for proper scrolling */
  font-family: "Space Grotesk", sans-serif;
  font-optical-sizing: auto;
  font-weight: 400;
  font-style: normal;
  background-color: #f4e4bc;
  /* More saturated cream light yellow */
  /* color: #e5e5cb; */
  color: #3c2a21;
  font-size: 1.1rem;
  flex-direction: column;
  /* Content starts after door opening animation completes */
  padding-top: 200vh;
  /* Extended padding to match longer scroll distance (200vh) */
  overflow-x: hidden;
  box-sizing: border-box;
  background-image: url("bgcolor.png");
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
}

/* Removed unused .outer class - layout is now handled by .svg-and-colors-container */

/* ===== CLEAN GRID-LIKE STRUCTURE WITH BALANCED LAYOUT ===== */
/* 
The page should have a clean, grid-like structure with two aligned sections: 
one large visual area for the main image (left) and a smaller supporting element (right). 
Both should align horizontally with consistent spacing, creating a balanced and systematic layout.
*/
.svg-and-colors-container {
  display: flex;
  gap: 2rem;
  align-items: flex-start;
  justify-content: center;
  width: 100%;
  max-width: min(1200px, 95vw);
  margin: 0 auto;
  padding: 0 1rem;
  box-sizing: border-box;
  position: relative; /* create stacking context for backdrop */
  z-index: 1; /* keep content above backdrop */
}

/* Intrinsic-size backdrop image centered behind the container */
.svg-and-colors-container::before {
  content: url("bgcolor.png");
  position: absolute;
  top: 0; /* starts at container top (below word animations in DOM) */
  left: 50%;
  transform: translateX(-50%);
  z-index: 0; /* behind container content */
  pointer-events: none;
}

/* SVG container - bouquet */
.svg-container {
  background-color: #ffffff5f;
  padding: 1px;
  border-radius: 1px;
  width: 100%;
  max-width: 500px;
  /* Larger SVG container for main visual area */
  flex: 1;
  /* Allow it to grow and take more space */
  position: relative;
  box-sizing: border-box;
}

/* ===== SPIRAL PAINT PALETTE SYSTEM ===== */
/* 
This creates a realistic paint palette effect where paint dots are positioned in a spiral pattern
around a fixed palette image, mimicking how real paint sits on a spiral-shaped palette.
I learn this through asking Chatgpt is there any way that I could position my color dots with more efficient way but not manually adjust every position of any single color dots. 
KEY CONCEPTS:
- Palette image stays completely fixed and centered
- Paint dots use absolute positioning with mathematical spiral coordinates
- No flexbox or grid to prevent unwanted resizing or spacing changes
- Each paint dot positioned using trigonometry (cos/sin) for precise spiral placement
- Spiral formula: r = increasing radius, θ = angle in degrees
- Paint dots positioned at 72° intervals (360°/5 dots = 72°) with increasing radius

SPIRAL MATHEMATICS:
- Each dot placed at angles: 0°, 72°, 144°, 216°, 288°
- Radius increases by 20px per dot: 60px, 80px, 100px, 120px, 140px
- Position calculation: x = center + radius * cos(angle), y = center + radius * sin(angle)
- CSS calc() used for precise positioning: calc(50% + radius * trig_value - half_dot_size)

EFFICIENCY ADVANTAGES OVER MANUAL FLEXBOX:
- MATHEMATICAL PRECISION: Spiral positioning uses exact trigonometric calculations instead of trial-and-error manual adjustments
- SCALABLE SYSTEM: Easy to add more paint dots by simply calculating new angles (e.g., 6 dots = 60° intervals)
- CONSISTENT SPACING: Mathematical progression ensures perfect spacing without manual tweaking
- RESPONSIVE DESIGN: All positions calculated relative to center, making it naturally responsive
- MAINTENANCE EFFICIENCY: One formula handles all positioning instead of individual CSS rules per dot
- VISUAL REALISM: Spiral pattern mimics real paint palette layout better than rigid grid/flexbox arrangements
- PERFORMANCE: No complex flexbox calculations or layout reflows - just simple absolute positioning
- CODE REUSABILITY: The spiral formula can be reused for different palette sizes or dot counts

This creates a natural spiral pattern that looks like real paint dots placed on a spiral palette.
*/

/* Color container - color palette at the right side */
.color-boxes-container {
  background-image: url("palette.png");
  background-size: 200%; /* Increased from 150% to 200% for even better visual coverage */
  background-position: center;
  background-repeat: no-repeat;
  padding: 10px;
  border-radius: 30px;
  width: 100%;
  max-width: 400px;
  height: auto;
  aspect-ratio: 1;
  /* Fixed aspect ratio to maintain proportions */
  position: relative;
  /* Enable absolute positioning for paint dots */
  flex-shrink: 0;
  /* Prevent shrinking to maintain consistent size */
  /* Removed flexbox to prevent image resizing and spacing issues */
  transform: translate(50px, 40px);
  box-sizing: border-box;
}

/* 
These are the individual paint dots that sit on the spiral palette.
Each dot is styled to look realistic with shadows, highlights, and smooth interactions.

VISUAL EFFECTS:
(border-radius: 50%) to mimic real paint drops
Drop shadows for depth and realism, inner highlights to simulate paint shine/reflection
Subtle borders for definition and smooth hover animations for interactivity

POSITIONING: Each dot positioned individually using spiral coordinates
*/

.inner {
  background-color: #d5cea3;
  width: clamp(40px, 4vw, 60px);
  height: clamp(40px, 4vw, 60px);
  border-radius: 50%;
  /* Circular paint dots */
  padding: 8px;
  position: absolute; /* Absolute positioning for spiral placement */

  /* Realistic paint dot effects */
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1),
    /* Subtle drop shadow */ inset 0 1px 2px rgba(255, 255, 255, 0.3); /* Inner highlight */
  border: 1px solid rgba(0, 0, 0, 0.1); /* Subtle border */
  transition: transform 0.2s ease, box-shadow 0.2s ease; /* Smooth interactions */
  box-sizing: border-box;
}

/* Hover effect for paint dots */
.inner:hover {
  transform: scale(1.05); /* Slight scale on hover */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15),
    /* Enhanced shadow on hover */ inset 0 1px 2px rgba(255, 255, 255, 0.4);
}

/* ===== INDIVIDUAL PAINT DOT POSITIONING ===== */
/* 
Each paint dot is positioned using precise spiral mathematics to create a realistic
spiral pattern on the palette. The positioning uses trigonometric calculations
to place each dot at specific angles and radii from the center.

SPIRAL FORMULA:
- Angle spacing: 72° between each dot (360° ÷ 5 dots = 72°)
- Radius progression: Each dot 20px further from center
- Position calculation: x = center + radius × cos(angle), y = center + radius × sin(angle)

TRIGONOMETRIC VALUES USED:
- cos(0°) = 1.000, sin(0°) = 0.000
- cos(72°) = 0.309, sin(72°) = 0.951  
- cos(144°) = -0.809, sin(144°) = 0.588
- cos(216°) = -0.809, sin(216°) = -0.588
- cos(288°) = 0.309, sin(288°) = -0.951

CSS CALC() POSITIONING:
- left: calc(50% + radius × cos_value - 25px) [25px = half dot width]
- top: calc(50% - radius × sin_value - 25px) [25px = half dot height]
- The negative sin_value accounts for CSS coordinate system (Y increases downward)

WHY SPIRAL POSITIONING IS MORE EFFICIENT THAN MANUAL FLEXBOX:

❌ MANUAL FLEXBOX APPROACH PROBLEMS:
- Requires individual margin/padding adjustments for each dot
- Trial-and-error positioning with pixel-by-pixel tweaking
- Difficult to maintain consistent spacing
- Hard to add/remove dots without affecting others
- Complex responsive behavior requiring media queries
- Visual inconsistencies due to manual adjustments
- Time-consuming maintenance and updates

✅ SPIRAL MATHEMATICAL APPROACH BENEFITS:
- Single formula calculates all positions automatically
- Perfect spacing guaranteed by mathematical progression
- Easy to scale: add dots by calculating new angles
- Naturally responsive: all positions relative to center
- Consistent visual appearance across all screen sizes
- Minimal code maintenance required
- Professional, precise positioning every time
- Reusable system for different palette configurations

DEVELOPMENT EFFICIENCY COMPARISON:
Manual Flexbox: 5+ individual CSS rules + multiple adjustments + testing + debugging
Spiral System: 1 mathematical formula + 5 simple calc() expressions = Perfect positioning

This mathematical approach eliminates the need for manual fine-tuning and ensures
consistent, professional results with minimal maintenance overhead.
*/
/* from box 1 until box7, the complementary color will be blue, pink, yellow,  range, cream and red, i choose these color palette because based on my real-life working experience, the most popular color and best seller will be around these color, and those color are mostly in less saturated color but not in a saturated color tone. thus, the color selection will be mostly in a light color tone.  */
#box1 {
  background-color: #ffb3d1;
  /* Less saturated pink */
  /* Spiral position 1: angle 0°, radius 60px from center - moved further left */
  left: calc(
    50% + 10px - 30px
  ); /* Reduced radius from 30px to 10px to move left */
  top: calc(50% - 30px); /* 50% center - half dot height */
}

#box2 {
  background-color: #87ceeb; /* Less saturated blue (sky blue) */
  /* Spiral position 2: angle 72°, radius 80px from center */
  left: calc(50% + 200px * 0.309 - 30px); /* cos(72°) ≈ 0.309 */
  top: calc(50% - 100px * 0.951 - 30px); /* sin(72°) ≈ 0.951 */
}

#box3 {
  background-color: #dda0dd; /* Less saturated purple (plum) */
  /* Spiral position 3: angle 144°, radius 100px from center */
  left: calc(50% + 100px * -0.809 - 30px); /* cos(144°) ≈ -0.809 */
  top: calc(50% - 100px * 0.588 - 30px); /* sin(144°) ≈ 0.588 */
}

#box4 {
  background-color: #f5f5dc; /* Cream - already desaturated */
  /* Spiral position 4: angle 216°, radius 120px from center */
  left: calc(50% + 120px * -0.809 - 30px); /* cos(216°) ≈ -0.809 */
  top: calc(50% - 120px * -0.588 - 30px); /* sin(216°) ≈ -0.588 */
}

#box5 {
  background-color: #f19672; /* Less saturated red (light salmon) */
  /* Spiral position 5: angle 288°, radius 140px from center */
  left: calc(
    50% + 10px * 0.309 - 30px
  ); /* cos(288°) ≈ 0.309 - moved left by reducing radius */
  top: calc(
    50% - 100px * -0.951 - 30px
  ); /* sin(288°) ≈ -0.951 - moved up by reducing radius */
}

#box6 {
  background-color: #f0e68c;
  /* Less saturated yellow (khaki) */
  /* Spiral position 6: angle 360°, radius 160px from center - moved further left */
  left: calc(
    50% - 110px * 1 - 30px
  ); /* Further reduced radius to move more left */
  top: calc(50% - 160px * 0 - 30px); /* sin(360°) = 0.000 */
}

#box7 {
  background-color: #ffb366;
  /* Less saturated orange (peach) */
  /* Spiral position 7: angle 432°, radius 180px from center - moved left and down */
  left: calc(50% + 1px * 0.309 - 30px); /* cos(432°) = cos(72°) ≈ 0.309 */
  top: calc(50% - 150px * 0.951 - 30px);
  /* Increased radius to move down */
}

a {
  margin-right: 10px;
  display: block;
}

#grid-container {
  border: 2px dashed #e5e5cb;
  margin: 50px 0;
  width: 100%;
  max-width: 500px;
  min-height: 500px;
  padding: 10px;
  display: grid;
  gap: 1rem;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  /* grid-template-rows: 1fr 1fr 1fr 1fr; */
  grid-template-rows: repeat(4, 1fr);
  box-sizing: border-box;
}

#grid-container > * {
  width: 100%;
  height: 100%;
  /* width: 50px;
  height: 50px;
  justify-content: start; */
  /* align-self: center;
  justify-self: center; */
}
/* Old grid-based box styling removed - now using spiral positioning above */

/* Word animation styling */
.word-animation {
  margin-top: 50px; /* Move the gif lower */
  margin-bottom: 20px;
  display: block;
  margin-left: auto;
  margin-right: auto;
  max-width: 100%;
  height: auto;
  box-sizing: border-box;
}

/* Butterfly gif fixed at bottom center */
.butterfly-bottom {
  position: fixed;
  left: 50%;
  bottom: 0;
  transform: translateX(-50%);
  z-index: 1001;
  pointer-events: none;
  width: min(550px, 70vw);
  height: auto;
}

/* Scroll gif styling */
.scroll-gif {
  position: absolute;
  width: min(450px, 80vw); /* Responsive width with max of 450px */
  height: auto;
  z-index: 1001; /* Above doors */
  left: 50%;
  transform: translateX(-50%);
  max-width: 100%;
}

.scroll-gif-top {
  top: 20%; /* Position at top center */
}

.scroll-gif-bottom {
  bottom: 20%; /* Position at bottom center */
}

/* ===== PAINT BRUSH CURSOR SYSTEM - ARTISTIC WORKSPACE FOCUS ===== */
/* 
You know that feeling when you walk into an art studio and everything just feels... creative?
That's exactly what we're creating here! The brush cursor isn't just a visual effect - it's a
psychological transformation that happens the moment users enter their artistic workspace.

Think of it like this: when you're outside the svg-and-colors-container, you're just browsing
the web like any other day. But the moment you step into that container with a color in hand,
you become an artist. Your cursor transforms into a paintbrush, and suddenly you're not just
dragging pixels around - you're painting flowers, creating beauty, making art.

This scoped approach ensures that the magical transformation only happens where it should -
within the boundaries of the creative workspace. It's like having a designated art studio
where the brush cursor appears, and everywhere else remains normal browsing territory.

The cursor.cur file contains our custom paintbrush cursor that makes users feel like they're
holding a real brush, complete with the perfect angle and visual weight that says "artist at work."
*/

/* SVG Section - positioned after door opening animation */
.svg-and-colors-container {
  margin-top: 100vh; /* Reduced margin since body now has 200vh padding */
  margin-bottom: 50px; /* Add bottom margin for spacing */
  cursor: url("cursor.cur"), auto; /* Custom brush cursor for this container area */
}

/* ===== BRUSH CURSOR STATES - THE ARTISTIC TRANSFORMATION ===== */
/* 
This is where the magic happens! When users are actively creating art within their workspace,
their cursor transforms into a paintbrush. It's not just a visual change - it's a complete
psychological shift from "web browser" to "digital artist."

The brush cursor only appears when:
1. User is dragging a color (active artistic state)
2. User is within the svg-and-colors-container (artistic workspace)
3. User is actively engaged in the creative process

This creates a focused, intentional artistic experience where the brush cursor becomes a symbol
of creative power and artistic agency.
*/

/* Custom brush cursor for dragging paint dots - overrides no-drop cursor */
/* This only applies when users are actively dragging within the artistic workspace */
.brush-cursor {
  cursor: url("cursor.cur") 0 0, crosshair, auto !important;
}

/* Apply brush cursor to body when dragging - but only within artistic workspace */
/* The !important ensures it overrides any other cursor styles during active creation */
body.brush-cursor {
  cursor: url("cursor.cur") 0 0, crosshair, auto !important;
}

/* Test cursor - for debugging cursor mechanism */
.brush-cursor-test {
  cursor: crosshair !important;
}

/* ===== DRAGGING STATE - THE ACTIVE ARTISTIC MOMENT ===== */
/* 
When users are actively dragging a color, they're in their most creative state. The paint dot
becomes slightly transparent (opacity: 0.7) to show they're "lifting" it off the palette,
scales up slightly (scale(1.1)) to emphasize the active selection, and gets a higher z-index
to ensure it stays on top during the drag operation.

The brush cursor on the dragging element reinforces that this specific color is "in hand"
and ready to be applied to the flowers. It's like holding a real paintbrush with wet paint
on the tip - you can see the color, feel the weight, and know exactly what you're about to create.
*/
.inner.dragging {
  cursor: url("cursor.cur") 0 0, crosshair, auto !important;
  opacity: 0.7; /* Slightly transparent to show "lifting" effect */
  transform: scale(1.1); /* Slightly larger to emphasize active selection */
  z-index: 1000; /* Stay on top during drag operation */
}

/* Drop zone highlighting */
.drop-zone {
  fill-opacity: 0.3;
  transition: fill-opacity 0.3s ease;
}

.drop-zone.highlighted {
  fill-opacity: 0.6;
}

/* SVG path highlighting during drag */
path.drag-over {
  fill-opacity: 0.8 !important;
  filter: brightness(1.2);
  transition: all 0.3s ease;
}

/* ===== SVG INTERACTION CURSORS - CANVAS-SPECIFIC ARTISTIC STATES ===== */
/* 
When users are actively painting within their artistic workspace, every element they interact with
should reinforce their role as an artist. The SVG paths (the flowers) and the SVG container (the canvas)
both adopt the brush cursor to create a cohesive artistic experience.

This ensures that whether users are hovering over a flower petal or moving across the canvas,
they always see the brush cursor - maintaining that magical "I'm an artist" feeling throughout
their entire creative process.

The cursor consistency is crucial for immersion. It's like having a real art studio where
everything you touch reminds you that you're creating something beautiful.
*/

/* Ensure SVG paths (flowers) use brush cursor during active artistic creation */
.brush-cursor path {
  cursor: url("cursor.cur") 0 0, crosshair, auto !important;
}

/* Ensure SVG container (canvas) uses brush cursor during active artistic creation */
.brush-cursor .svg-container {
  cursor: url("cursor.cur") 0 0, crosshair, auto !important;
}

/* Responsive design for smaller screens */
@media (max-width: 768px) {
  .svg-and-colors-container {
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    padding: 0 0.5rem;
  }

  .svg-container {
    width: 100%;
    max-width: 500px;
  }

  .color-boxes-container {
    width: 100%;
    max-width: 400px;
    transform: translate(0, 20px); /* Reduce transform on mobile */
  }

  .scroll-gif {
    width: min(300px, 90vw);
  }
}

/* Additional responsive breakpoints */
@media (max-width: 480px) {
  .svg-and-colors-container {
    gap: 0.5rem;
    padding: 0 0.25rem;
  }

  .color-boxes-container {
    transform: translate(0, 10px);
  }

  .scroll-gif {
    width: min(250px, 85vw);
  }

  .word-animation {
    margin-top: 20px;
    margin-bottom: 10px;
  }
}

/* Extra small screens */
@media (max-width: 320px) {
  .svg-and-colors-container {
    padding: 0 0.1rem;
    gap: 0.25rem;
  }

  .color-boxes-container {
    transform: translate(0, 5px);
  }

  .scroll-gif {
    width: min(200px, 90vw);
  }
}
